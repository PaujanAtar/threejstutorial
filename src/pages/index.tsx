import { useEffect, useRef } from "react"
import Head from "next/head"
import { Inter } from "next/font/google"
import * as THREE from "three"
import styles from "@/styles/Home.module.scss"

const inter = Inter({ subsets: ["latin"] })

export default function Home() {
  const canvasRef = useRef<HTMLCanvasElement | null>(null)

  useEffect(() => {
    if (!canvasRef.current) return
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Scene
    const scene = new THREE.Scene()

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Object
    /* const geometry = new THREE.BoxGeometry(1, 1, 1)
    const material = new THREE.MeshBasicMaterial({
      color: 0xff0000,
      wireframe: true,
    })
    const mesh = new THREE.Mesh(geometry, material)
    scene.add(mesh)

    // mesh.position.x = 0.7
    // mesh.position.y = -0.6
    // mesh.position.z = 1
    // mesh.position.normalize()
    mesh.position.set(0.7, -0.6, 1)

    // mesh.scale.x = 2
    // mesh.scale.y = 0.25
    // mesh.scale.z = 0.5
    mesh.scale.set(2, 0.25, 0.5)

    mesh.rotation.x = Math.PI * 0.25
    mesh.rotation.y = Math.PI * 0.25

    console.log(mesh.position.length()) */

    const group = new THREE.Group()
    group.scale.y = 2
    group.rotation.y = 0.2
    scene.add(group)

    const cube1 = new THREE.Mesh(
      new THREE.BoxGeometry(1, 1, 1),
      new THREE.MeshBasicMaterial({ color: "royalblue", wireframe: true })
    )
    cube1.position.x = -1.5
    group.add(cube1)

    const cube2 = new THREE.Mesh(
      new THREE.BoxGeometry(1, 1, 1),
      new THREE.MeshBasicMaterial({ color: "dodgerblue", wireframe: true })
    )
    cube2.position.x = 0
    group.add(cube2)

    const cube3 = new THREE.Mesh(
      new THREE.BoxGeometry(1, 1, 1),
      new THREE.MeshBasicMaterial({ color: "lightskyblue", wireframe: true })
    )
    cube3.position.x = 1.5
    group.add(cube3)

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Sizes
    const sizes = {
      width: 800,
      height: 600,
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Camera
    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height)
    camera.position.z = 3
    scene.add(camera)

    // camera.lookAt(new THREE.Vector3(0, -1, 0))
    // camera.lookAt(mesh.position)

    // console.log(mesh.position.distanceTo(camera.position))

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //AxisHelper
    const axesHelper = new THREE.AxesHelper(2)
    scene.add(axesHelper)

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Renderer
    const renderer = new THREE.WebGLRenderer({
      canvas: canvasRef.current,
    })
    renderer.setSize(sizes.width, sizes.height)

    renderer.render(scene, camera)

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <canvas ref={canvasRef}></canvas>
      </main>
    </>
  )
}
